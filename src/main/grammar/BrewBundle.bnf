// Copyright 2000-2020 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
{
  parserClass="co.anbora.labs.brewbundle.lang.core.parser.BrewParser"
  psiClassPrefix="Brew"
  psiImplClassSuffix="Impl"

  implements="co.anbora.labs.brewbundle.lang.core.psi.BrewElement"
  extends="co.anbora.labs.brewbundle.lang.core.psi.BrewElementImpl"

  psiPackage="co.anbora.labs.brewbundle.lang.core.psi"
  psiImplPackage="co.anbora.labs.brewbundle.lang.core.psi.impl"
  parserUtilClass="co.anbora.labs.brewbundle.lang.core.util.BrewParserUtil"

  elementTypeHolderClass="co.anbora.labs.brewbundle.lang.core.psi.BrewTypes"

  elementTypeClass="co.anbora.labs.brewbundle.lang.core.BrewElementType"
  tokenTypeClass="co.anbora.labs.brewbundle.lang.core.BrewTokenType"

  tokens = [
    BOOL_LITERAL     ='regexp:(true)|(false)'
    NUMBER_LITERAL   ='regexp:\d+(\.\d*)?'
    STRING_LITERAL   ="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"

    IDENTIFIER       ='regexp:[\-_a-zA-Z0-9]+'
    ENVIRONMENT      ='regexp::[\-_a-zA-Z0-9]+'

    L_BRACE          =  '{'
    R_BRACE          =  '}'
    L_BRACK          =  '['
    R_BRACK          =  ']'
    COLON            =  ':'
    COMMA            =  ','
    DOT              =  '.'
    QUESTION_MARK    =  '?'
    L_PAREN          =  '('
    R_PAREN          =  ')'
    AND              =  '&'
    OR               =  '|'
    DOUBLE_QUOTE     =  '\"'
    SINGLE_QUOTE     =  "\'"

    SYSTEM           = 'system_kw'
    OTHER_IDENTIFIER = 'other_identifier'

  ]
}

// Naming convention:
//
//   * tokens are lowercase: for, if, identifier
//   * rules are PascalCase: StructItem
//   * recovery related rules are PascalCase_with_snake_suffix: Item_recover

File ::= !<<eof>> item_* {pin=1 recoverWhile=recover_any}
private recover_any ::= !(item_)

private item_ ::= (TapProperty | CaskArgsProperty | BrewProperty | CaskProperty | MasProperty | WhaleBrewProperty) EndLine

TapProperty ::= tap CommandProperty {pin=1}

CaskArgsProperty ::= CASK_ARGS CommandProperty {pin=1}

BrewProperty ::= brew CommandProperty {pin=1}

CaskProperty ::= cask CommandProperty {pin=1}

MasProperty ::= mas CommandProperty {pin=1}

WhaleBrewProperty ::= whalebrew CommandProperty {pin=1}

private CommandProperty ::= [!EndLine StringLitOrProperty (!EndLine ',' StringLitOrProperty) *] {pin(".*")=1}

//private StringLitOrProperty ::= (StringLit | Property) UnlessLit?
private StringLitOrProperty ::= <<comma_sep_items ((StringLit | Property) UnlessLit? &(','|EndLine))>>

private EndLine ::= LINE_TERMINATOR | <<eof>>

Property ::= [] PropertyName ':' value {pin=1 recoverWhile=recover}

PropertyName ::= IDENTIFIER
private recover ::= !(',' | ']' | '}' | '[' | '{' | LINE_TERMINATOR)

json ::= array | object  { hooks=[wsBinders="null, null"] }
value ::= BOOL_LITERAL | StringLit | ENVIRONMENT | NUMBER_LITERAL | json {name="value"}

array ::= '[' [!']' item (!']' ',' item) *] ']' {pin(".*")=1 extends=json}
private item ::= StringLit | json {recoverWhile=recover}
object ::= '{' [!'}' Property (!'}' ',' Property) *] '}' {pin(".*")=1 extends=json}

StringLit ::= STRING_LITERAL

UnlessLit ::= unless IDENTIFIER StringLit

private meta comma_sep_items ::= <<param>> ( ',' <<param>> )* ','?
